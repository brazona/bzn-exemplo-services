openapi: 3.0.4
info:
  title: Swagger Exemplo Services - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: https://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.12
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
tags:
  - name: usuario
    description: Usu√°rio do Sistema
paths:
  /usuario/{username}:
    get:
      tags:
        - usuario
      summary: Get user by user name.
      description: Get user detail based on username.
      operationId: buscarPorUsername
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /usuario/{id}:
    get:
      tags:
        - usuario
      summary: Get user by user name.
      description: Get user detail based on username.
      operationId: buscarPorId
      parameters:
        - name: id
          in: path
          description: The name that needs to be fetched. Use user1 for testing
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found          
    put:
      tags:
        - usuario
      summary: Update user resource.
      description: This can only be done by the logged in user.
      operationId: atualizarUsuario
      parameters:
        - name: id
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
        '404':
          description: user not found
    delete:
      tags:
        - usuario
      summary: Delete user resource.
      description: This can only be done by the logged in user.
      operationId: deletarUsuario
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User deleted
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Usuario:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: cezar@gmail.com
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            "write:pets": modify pets in your account
            "read:pets": read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header